@page "/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using NextStream.Services
@using System.Security.Claims
@layout Layout.EmptyLayout
@inject NavigationManager Navigator
@rendermode InteractiveServer
@inject UserService userService

<link href="/Login.css" rel="stylesheet" />

<div class="LoginModal">
    <div class="ModalHeader">
        <img src="Images/Logo.png" height="165" />
    </div>
    <EditForm id="LoginForm" Model="@loginModel" OnValidSubmit="LoginHandler">
        <DataAnnotationsValidator />

        <div id="UserNameInput" class="FormInput">
            <InputText name="Username" @bind-Value="loginModel.Username"  placeholder="Email..." />
        </div>
        <div id="PasswordInput" class="FormInput">
            <InputText type="password" name="Password" @bind-Value="loginModel.Password"  placeholder="Wachtwoord..." />
        </div>
        <div class="FormInput">
            <button type="submit" id="LoginButton" class="LoginButton" >Inloggen</button>
        </div>
        <hr />
        <ValidationSummary />
    </EditForm>
    <div class="FormButtonsBottom">
        <div class="RegisterButton">
            Registreren
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async void LoginHandler(EditContext editContext)
    {
        var valid = userService.ValidateUser(loginModel.Username!, loginModel.Password!);
        if (valid)
        {   
            Guid key = Guid.NewGuid();
            BlazorCookieLoginMiddleware.Logins[key] = new LoginInfo { Email = loginModel.Username!, Password = loginModel.Password! };
            Navigator.NavigateTo($"/login?key={key}", true);
        }
        else
        {
            ValidationMessageStore messageStore = new ValidationMessageStore(editContext);
            messageStore.Add(() => loginModel.Username, "Ongeldige gebruikersnaam of wachtwoord.");
            editContext.NotifyValidationStateChanged();
        }
    }

    public class LoginModel
    {
        [EmailAddress(ErrorMessage = "Geen geldig email address")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Gebruikersnaam mag niet leeg zijn")]
        public string? Username { get; set; } = String.Empty;

        [Required(AllowEmptyStrings = false, ErrorMessage = "Wachtwoord mag niet leeg zijn")]
        public string? Password { get; set; } = String.Empty;
    }
}
